// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-core/sync (interfaces: Sync)

// Package plugin is a generated GoMock package.
package plugin

import (
	models "github.com/baetyl/baetyl-core/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSync is a mock of Sync interface
type MockSync struct {
	ctrl     *gomock.Controller
	recorder *MockSyncMockRecorder
}

// MockSyncMockRecorder is the mock recorder for MockSync
type MockSyncMockRecorder struct {
	mock *MockSync
}

// NewMockSync creates a new mock instance
func NewMockSync(ctrl *gomock.Controller) *MockSync {
	mock := &MockSync{ctrl: ctrl}
	mock.recorder = &MockSyncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSync) EXPECT() *MockSyncMockRecorder {
	return m.recorder
}

// ProcessApplication mocks base method
func (m *MockSync) ProcessApplication(arg0 *models.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessApplication", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessApplication indicates an expected call of ProcessApplication
func (mr *MockSyncMockRecorder) ProcessApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessApplication", reflect.TypeOf((*MockSync)(nil).ProcessApplication), arg0)
}

// ProcessConfiguration mocks base method
func (m *MockSync) ProcessConfiguration(arg0 models.Volume, arg1 *models.Configuration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessConfiguration", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessConfiguration indicates an expected call of ProcessConfiguration
func (mr *MockSyncMockRecorder) ProcessConfiguration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessConfiguration", reflect.TypeOf((*MockSync)(nil).ProcessConfiguration), arg0, arg1)
}

// ProcessResource mocks base method
func (m *MockSync) ProcessResource(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessResource", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessResource indicates an expected call of ProcessResource
func (mr *MockSyncMockRecorder) ProcessResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessResource", reflect.TypeOf((*MockSync)(nil).ProcessResource), arg0)
}

// ProcessVolumes mocks base method
func (m *MockSync) ProcessVolumes(arg0 []models.Volume, arg1 map[string]*models.Configuration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessVolumes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessVolumes indicates an expected call of ProcessVolumes
func (mr *MockSyncMockRecorder) ProcessVolumes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessVolumes", reflect.TypeOf((*MockSync)(nil).ProcessVolumes), arg0, arg1)
}

// Report mocks base method
func (m *MockSync) Report() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Report")
}

// Report indicates an expected call of Report
func (mr *MockSyncMockRecorder) Report() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockSync)(nil).Report))
}

// Start mocks base method
func (m *MockSync) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockSyncMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSync)(nil).Start))
}

// Stop mocks base method
func (m *MockSync) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockSyncMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSync)(nil).Stop))
}
