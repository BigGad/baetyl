// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-core/agent (interfaces: Agent)

// Package plugin is a generated GoMock package.
package plugin

import (
	agent "github.com/baetyl/baetyl-core/agent"
	models "github.com/baetyl/baetyl-core/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAgent is a mock of Agent interface
type MockAgent struct {
	ctrl     *gomock.Controller
	recorder *MockAgentMockRecorder
}

// MockAgentMockRecorder is the mock recorder for MockAgent
type MockAgentMockRecorder struct {
	mock *MockAgent
}

// NewMockAgent creates a new mock instance
func NewMockAgent(ctrl *gomock.Controller) *MockAgent {
	mock := &MockAgent{ctrl: ctrl}
	mock.recorder = &MockAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgent) EXPECT() *MockAgentMockRecorder {
	return m.recorder
}

// ProcessApplication mocks base method
func (m *MockAgent) ProcessApplication(arg0 models.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessApplication", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessApplication indicates an expected call of ProcessApplication
func (mr *MockAgentMockRecorder) ProcessApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessApplication", reflect.TypeOf((*MockAgent)(nil).ProcessApplication), arg0)
}

// ProcessConfiguration mocks base method
func (m *MockAgent) ProcessConfiguration(arg0 models.Volume, arg1 models.Configuration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessConfiguration", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessConfiguration indicates an expected call of ProcessConfiguration
func (mr *MockAgentMockRecorder) ProcessConfiguration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessConfiguration", reflect.TypeOf((*MockAgent)(nil).ProcessConfiguration), arg0, arg1)
}

// ProcessResource mocks base method
func (m *MockAgent) ProcessResource(arg0 *agent.EventLink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessResource", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessResource indicates an expected call of ProcessResource
func (mr *MockAgentMockRecorder) ProcessResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessResource", reflect.TypeOf((*MockAgent)(nil).ProcessResource), arg0)
}

// ProcessVolumes mocks base method
func (m *MockAgent) ProcessVolumes(arg0 []models.Volume, arg1 map[string]models.Configuration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessVolumes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessVolumes indicates an expected call of ProcessVolumes
func (mr *MockAgentMockRecorder) ProcessVolumes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessVolumes", reflect.TypeOf((*MockAgent)(nil).ProcessVolumes), arg0, arg1)
}

// Report mocks base method
func (m *MockAgent) Report() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Report")
}

// Report indicates an expected call of Report
func (mr *MockAgentMockRecorder) Report() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockAgent)(nil).Report))
}

// Start mocks base method
func (m *MockAgent) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockAgentMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAgent)(nil).Start))
}

// Stop mocks base method
func (m *MockAgent) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockAgentMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAgent)(nil).Stop))
}
